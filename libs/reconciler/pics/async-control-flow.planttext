@startuml

title "<b>current</b>: nil; <b>Intent</b>: (items={A, B}, deps: {A->B})"

queue "Resume Ctx" as Resume
actor Agent
control "Reconciler"
entity Configurator

Agent --> Reconciler : New()
Agent --> Reconciler : Reconcile(current, intent)
Reconciler --> Configurator : Create(B)
activate Configurator
note right Configurator: Runs <b>asynchronously</b>\ninside a <b>separate Go Routine</b>
Configurator --> Reconciler : Continues in background
Reconciler --> Reconciler : Create(A) must <b>wait</b>
note over Reconciler: A depends on B which is still being created\nA will not be reconciled during this run
Reconciler --> Agent : Return Status
note over Agent: <b>AsyncOpsInProgress</b> is true\n<b>ReadyToResume</b> channel is non-nil
Agent --> Resume : store <b>ReadyToResume</b> channel

Configurator --> Resume : Calls callback <b>done(nil error)</b>
deactivate Configurator
Resume --> Agent : Resume reconciliation
Agent --> Reconciler : New()
Agent --> Reconciler : Reconcile(current, intent)
Reconciler --> Reconciler : <b>Post-process</b> Create(B)
note over Reconciler : Update current state:\n - add item B with state data
Reconciler --> Configurator : Create(A)
activate Configurator
note right Configurator: Runs <b>synchronously</b>\nwithin the caller's Go routine
Configurator --> Reconciler : Return nil error
deactivate Configurator
Reconciler --> Reconciler : <b>Post-process</b> Create(A)
note over Reconciler : Update current state:\n - add item A with state data
Reconciler --> Agent : Return Status
note over Agent: <b>AsyncOpsInProgress</b> is false\n<b>ReadyToResume</b> channel is nil
Agent --> Resume : store <b>ReadyToResume</b> channel as <b>nil</b>
note left Agent: Case statement for <b>ReadyToResume</b> channel\nwill be disabled by Golang as long as it is nil

@enduml